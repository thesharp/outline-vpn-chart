apiVersion: v1
kind: ConfigMap
metadata:
  name: init-scripts
data:
  init.sh: |
    #!/usr/bin/env bash
    # vi: tabstop=4 expandtab shiftwidth=2 softtabstop=2

    apk add --no-cache openssl curl

    set -Eeuo pipefail
    trap cleanup SIGINT SIGTERM ERR EXIT

    usage() {
      cat << EOF # remove the space between << and EOF, this is due to web plugin issue
    Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] -p param_value arg1 [arg2...]

    Bootstrap Outline installation. Run it from bash:5-alpine3.21


    Available options:

    -h, --help      Print this help and exit
    EOF
      exit
    }

    cleanup() {
      trap - SIGINT SIGTERM ERR EXIT
      # script cleanup here
    }

    msg() {
      echo >&2 -e "${1-}"
    }

    die() {
      local msg=$1
      local code=${2-1} # default exit status 1
      msg "$msg"
      exit "$code"
    }

    # script logic here

    function safe_base64() {
      # Implements URL-safe base64 of stdin, stripping trailing = chars.
      # Writes result to stdout.
      # TODO: this gives the following errors on Mac:
      #   base64: invalid option -- w
      #   tr: illegal option -- -
      local url_safe
      url_safe="$(base64 -w 0 - | tr '/+' '_-')"
      echo -n "${url_safe%%=*}"  # Strip trailing = chars
    }

    function join() {
      local IFS="$1"
      shift
      echo "$*"
    }

    data_dir="/opt/outline"
    persisted_state="${data_dir}/persisted-state"
    access_txt="${data_dir}/access.txt"
    PUBLIC_HOSTNAME=$(curl -s http://ifconfig.so)
    # SB_API_PREFIX="$(head -c 16 /dev/urandom | safe_base64)"
    # API_PORT=35683
    # CLIENT_PORT=35684
    PUBLIC_API_URL="https://${PUBLIC_HOSTNAME}:${API_PORT}/${SB_API_PREFIX}"

    if [ ! -d ${data_dir} ]; then
      mkdir -p ${data_dir}
    fi

    if [ ! -d ${persisted_state} ] ; then
      mkdir -p ${persisted_state}
      chmod ug+rwx,g+s,o-rwx "${persisted_state}"
    else
      msg "Directory ${persisted_state} already exists. Exiting."
      exit 0
    fi

    apk add --no-cache openssl curl

    # Generate self-signed cert and store it in the persistent state directory.
    CERTIFICATE_NAME="${persisted_state}/shadowbox-selfsigned"
    SB_CERTIFICATE_FILE="${CERTIFICATE_NAME}.crt"
    SB_PRIVATE_KEY_FILE="${CERTIFICATE_NAME}.key"
    declare -a openssl_req_flags=(
      -x509 -nodes -days 36500 -newkey rsa:4096
      -subj "/CN=outline-vpn-server"
      -keyout "${SB_PRIVATE_KEY_FILE}" -out "${SB_CERTIFICATE_FILE}"
    )
    openssl req "${openssl_req_flags[@]}" >&2

    # Add a tag with the SHA-256 fingerprint of the certificate.
    # (Electron uses SHA-256 fingerprints: https://github.com/electron/electron/blob/9624bc140353b3771bd07c55371f6db65fd1b67e/atom/common/native_mate_converters/net_converter.cc#L60)
    # Example format: "SHA256 Fingerprint=BD:DB:C9:A4:39:5C:B3:4E:6E:CF:18:43:61:9F:07:A2:09:07:37:35:63:67"
    CERT_OPENSSL_FINGERPRINT="$(openssl x509 -in "${SB_CERTIFICATE_FILE}" -noout -sha256 -fingerprint)" || return
    # Example format: "BDDBC9A4395CB34E6ECF1843619F07A2090737356367"
    CERT_HEX_FINGERPRINT="$(echo "${CERT_OPENSSL_FINGERPRINT#*=}" | tr -d :)" || return

    config=()
    config+=("\"portForNewAccessKeys\": ${CLIENT_PORT}")
    config+=("\"hostname\": \"${PUBLIC_HOSTNAME}\"")
    echo "{$(join , "${config[@]}")}" > "${persisted_state}/shadowbox_server_config.json"

    echo "{\"certSha256\": \"${CERT_HEX_FINGERPRINT}\",
    \"apiUrl\": \"${PUBLIC_API_URL}\"}" > ${access_txt}
